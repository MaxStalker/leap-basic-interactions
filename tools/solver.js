const ethUtil = require("ethereumjs-util");
const ethers = require("ethers");
const { Tx, Outpoint, Input, Output } = require('leap-core');

const provider = new ethers.providers.JsonRpcProvider(process.env['RPC_URL'] || 'https://testnet-node1.leapdao.org');

async function main() {

  const hand = process.argv[2];

  let roundLock;
  let abi;
  try {
    roundLock = require('./../build/contracts/RoundLock.json');
  } catch (e) {
    console.error('Please run `npm run compile:contracts` first. ðŸ˜‰');
    return;
  }
  console.log(roundLock);
  abi = new ethers.utils.Interface(roundLock.abi);
  const msgSender = '0xD8536F0dF61CD496B78e336b7Fe5e8bDFF45CD2f';

  // both of those from server
  //const codeBuf = //roundLock.deployedBytecode;
  const codeBuf = "0x608060405234801561001057600080fd5b506004361061004f5760e060020a600035046322dc9f50811461005457806342a89658146100fa5780638009a51c146101b2578063ea8a1af014610256575b600080fd5b6100f86004803603602081101561006a57600080fd5b810190602081018135602060020a81111561\n" +
    "008457600080fd5b82018360208201111561009657600080fd5b803590602001918460018302840111602060020a831117156100b757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061025e945050505050565b005b\n" +
    "61019e6004803603602081101561011057600080fd5b810190602081018135602060020a81111561012a57600080fd5b82018360208201111561013c57600080fd5b803590602001918460018302840111602060020a8311171561015d57600080fd5b91908080601f016020809104026020016040519081016040528093\n" +
    "9291908181526020018383808284376000920191909152509295506103d3945050505050565b604080519115158252519081900360200190f35b61019e600480360360208110156101c857600080fd5b810190602081018135602060020a8111156101e257600080fd5b8201836020820111156101f457600080fd5b8035\n" +
    "90602001918460018302840111602060020a8311171561021557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610411945050505050565b6100f8610456565b61026781610411565b15156102b3576040805160e560\n" +
    "020a62461bcd0281526020600482015260106024820152608260020a6f1b9bdd0818481d985b1a59081a185b9902604482015290519081900360640190fd5b6040805160e060020a6370a08231028152306004820152905173d2d0f8a6adff16c2098101087f9548465ec96c989160009183916370a08231916024808301\n" +
    "926020929190829003018186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d602081101561033657600080fd5b50516040805160e060020a63a9059cbb02815273d8536f0df61cd496b78e336b7fe5e8bdff45cd2f600482015260248101839052905191925060\n" +
    "0160a060020a0384169163a9059cbb916044808201926020929091908290030181600087803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b5050505050565b600060018054600181600116156101000203166002900490508251\n" +
    "141561040c5760006103ff83610458565b60025414915061040c9050565b919050565b6000606082905060018054600181600116156101000203166002900490508151141561045057600061044282610458565b60025414925061040c915050565b50919050565b565b600080805b835181101561049b57838181518110\n" +
    "151561047457fe5b60209101015160f860020a9081900402600160f860020a031916919091019060010161045d565b509291505056fea165627a7a72305820fbbe233f231b89c0cc1f2c34183ae32f7771af382a598031348034721f9119d00029";
  const txHash = '0x85042df26554c2d4586746e191a3ae3aa22ad7cf7bd78300ad9d0b0a73793666';

  console.log(hand);
  // array is specific to ethers implementation
  //const msgData = abi.functions.roundResult.encode([hand]);
  const msgData = hand;

  // replace following txHash on next round
  // need to be string!
  let tx = await provider.send('eth_getTransactionByHash', [txHash]);
  let txIndex = tx.transactionIndex;
  let txValue = tx.value;

  // create the spending condition
  const input = new Input(
    {
      prevout: new Outpoint(txHash, txIndex),
      script: codeBuf,
      msgData: abi.functions.roundResult.encode([hand])
    }
  );

  // TODO: for Johann
  const output = new Output(txValue, msgSender, 0);
  const condTx = Tx.spendCond(
    [input],
    [output]
  );

  console.log('input', JSON.stringify(input));
  console.log('output', JSON.stringify(output));

  const txRaw = condTx.hex();
  const res = await provider.send('eth_sendRawTransaction', [txRaw]);
  console.log('transaction hash:', res);

}
function onException(e) {
  console.error(e);
  process.exit(1);
}

process.on("uncaughtException", onException);
process.on("unhandledRejection", onException);
main();
